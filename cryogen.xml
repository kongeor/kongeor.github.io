<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://kongeor.github.io/' rel='self' type='application/rss+xml'/>
<title>
Blogen
</title>
<link>
http://kongeor.github.io/
</link>
<description>
This is awesome
</description>
<lastBuildDate>
Thu, 06 Oct 2016 18:04:59 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://kongeor.github.io/posts/2016-10-05-automating-the-deployment-of-a-cryogen-blog-to-github-pages/
</guid>
<link>
http://kongeor.github.io/posts/2016-10-05-automating-the-deployment-of-a-cryogen-blog-to-github-pages/
</link>
<title>
Automating the deployment of a cryogen blog to github pages
</title>
<description>
&lt;p&gt;I like static site generators, &lt;code&gt;clojure&lt;/code&gt; and &lt;a href='https://pages.github.com/'&gt;github pages&lt;/a&gt; and for those three reasons I happen to like &lt;a href='http://cryogenweb.org/'&gt;cryogen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The only &quot;issue&quot; I encountered when I started playing around with &lt;a href='http://cryogenweb.org/'&gt;cryogen&lt;/a&gt; was &lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;deployment&lt;/a&gt;. I could make a script to push the generated content to &lt;code&gt;kongeor.github.io&lt;/code&gt; but that was no fun. This process had to be automated and why not using continuous integration platform like &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;?&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;removing&amp;#95;the&amp;#95;&lt;i&gt;blog-prefix&lt;/i&gt;&quot;&gt;&lt;/a&gt;Removing the &lt;i&gt;blog-prefix&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;The first thing to do is to remove the &lt;code&gt;/blog&lt;/code&gt; prefix. We want blog content to be in the root.  We need to edit the &lt;code&gt;resources/templates/config.edn&lt;/code&gt; and remove the &lt;code&gt;:blog-prefix&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;enabling&amp;#95;&lt;code&gt;circleci&lt;/code&gt;&quot;&gt;&lt;/a&gt;Enabling &lt;code&gt;circleci&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href='https://circleci.com/'&gt;Circleci&lt;/a&gt; is going to deploy our blog to &quot;production&quot;. &lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;circle.yml&lt;/code&gt; in the root of the project which should looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;deployment:
  production:
    branch: master
    commands:
      - ./deploy.sh

test:
  override:
    - lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are overriding the default task which is to run tests to compile the blog which will be thrown in &lt;code&gt;resources/public&lt;/code&gt; (hacky! I know ...). Then the &lt;code&gt;deploy.sh&lt;/code&gt; script is going to  run which looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global user.email &amp;quot;${GIT&amp;#95;EMAIL}&amp;quot;
git config --global user.name &amp;quot;${GIT&amp;#95;NAME}&amp;quot;

rm -rf build
git clone git@github.com:kongeor/kongeor.github.io.git build
cp -rf resources/public/&amp;#42; build
cd build
git add &amp;#42;
git commit -a -m &amp;quot;build&amp;quot;
git push -u origin master
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are configuring &lt;code&gt;git&lt;/code&gt; because each build is a fresh new start. &lt;code&gt;GIT&amp;#95;EMAIL&lt;/code&gt; and &lt;code&gt;GIT&amp;#95;NAME&lt;/code&gt; are pulled from the environmental variables which can be configured in &lt;code&gt;circleci&lt;/code&gt;'s project settings. Go to &lt;a href='https://circleci.com/dashboard'&gt;dashboard&lt;/a&gt; and click the &lt;i&gt;gear&lt;/i&gt; near the project.&lt;/p&gt;&lt;p&gt;Then we remove the &lt;code&gt;build&lt;/code&gt; directory in case it exist - this is done mostly for convenience for local testing. Then &lt;code&gt;foo&lt;/code&gt;.github.io is cloned to &lt;code&gt;build&lt;/code&gt; directory. This repo will have only the built static site. The fresh compiled site is copied over it, and with the  convenvience of &lt;code&gt;git&lt;/code&gt; we add all the files which essentially will have only the diffences, and  push the changes.&lt;/p&gt;&lt;p&gt;In order for this thing to work, &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;  needs to have permissions to push to that repo.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;setup&amp;#95;ssh&amp;#95;keys&quot;&gt;&lt;/a&gt;Setup SSH keys&lt;/h3&gt;&lt;p&gt;You need to generate an &lt;a href='https://help.github.com/articles/generating-an-ssh-key/'&gt;ssh key&lt;/a&gt;. Most probably you already have one, but I don't think that it's a good idea to use that one, because you will need to add your private key to &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Go to project settings under your &lt;code&gt;foo.github.io&lt;/code&gt; repo and add your public key.&lt;/p&gt;&lt;p&gt;You need to go once again to project settings in &lt;a href='https://circleci.com/dashboard'&gt;dashboard&lt;/a&gt;,  find the &lt;code&gt;SSH Permissions&lt;/code&gt; settings and add your private &lt;code&gt;SSH&lt;/code&gt; key there. You can find more information &lt;a href='https://circleci.com/docs/github-security-ssh-keys/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;test&amp;#95;it!&quot;&gt;&lt;/a&gt;Test it!&lt;/h3&gt;&lt;p&gt;You should be good to test this setup. Create a post, commit and push. Boom! &lt;a href='https://circleci.com/'&gt;Circleci&lt;/a&gt; should fire up the build and when ready it should push the compiled blog to &quot;production&quot;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 05 Oct 2016 00:00:00 +0000
</pubDate>
</item>
</channel>
</rss>
