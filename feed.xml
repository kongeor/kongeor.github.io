<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://kongeor.github.io/' rel='self' type='application/rss+xml'/>
<title>
Blogen
</title>
<link>
http://kongeor.github.io/
</link>
<description>
This is awesome
</description>
<lastBuildDate>
Sun, 09 Oct 2016 08:25:43 +0000
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://kongeor.github.io/posts/2016-10-08-getting-started-with-clojure-and-lighttable/
</guid>
<link>
http://kongeor.github.io/posts/2016-10-08-getting-started-with-clojure-and-lighttable/
</link>
<title>
Getting started with clojure and LightTable
</title>
<description>
&lt;p&gt;If you are new to clojure you should consider &lt;a href='http://lighttable.com/'&gt;LightTable&lt;/a&gt; as it is very easy to setup and get started.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;installing&amp;#95;the&amp;#95;required&amp;#95;software&quot;&gt;&lt;/a&gt;Installing the required software&lt;/h3&gt;&lt;p&gt;Make sure that you have jdk 7 or greater installed. This can be either &lt;a href='http://www.oracle.com/technetwork/java/javase/downloads/index.html'&gt;oracle jdk&lt;/a&gt; or &lt;a href='http://openjdk.java.net/'&gt;openjdk&lt;/a&gt; depending on your preference and &lt;code&gt;OS&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;To verify it run:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;➜ java -version
java version &amp;quot;1.8.0&amp;#95;102&amp;quot;
Java&amp;#40;TM&amp;#41; SE Runtime Environment &amp;#40;build 1.8.0&amp;#95;102-b14&amp;#41;
Java HotSpot&amp;#40;TM&amp;#41; 64-Bit Server VM &amp;#40;build 25.102-b14, mixed mode&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Download &lt;a href='http://leiningen.org/'&gt;Leiningen&lt;/a&gt; and follow the installation instructions.&lt;/p&gt;&lt;p&gt;Download &lt;a href='http://lighttable.com/'&gt;LightTable&lt;/a&gt; and extract it.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;generating&amp;#95;a&amp;#95;leiningen&amp;#95;project&quot;&gt;&lt;/a&gt;Generating a Leiningen project&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Leiningen&lt;/code&gt; is a dependency managment and build automation tool for &lt;code&gt;clojure&lt;/code&gt; projects.&lt;/p&gt;&lt;p&gt;In order to create a &lt;code&gt;leiningen&lt;/code&gt; project all you have to do is:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;➜ lein new hello
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will generate a scaffold for a project named &lt;code&gt;hello&lt;/code&gt; using the default template.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;opening&amp;#95;the&amp;#95;project&amp;#95;in&amp;#95;lighttable&quot;&gt;&lt;/a&gt;Opening the project in LightTable&lt;/h3&gt;&lt;p&gt;Fire up &lt;code&gt;LightTable&lt;/code&gt; from the extracted directory.&lt;/p&gt;&lt;p&gt;Go to &lt;code&gt;File ➜ Open Folder&lt;/code&gt; and open the &lt;code&gt;hello&lt;/code&gt; folder that was generated by &lt;code&gt;leiningen&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;From the navigation pane on the left browse and open the &lt;code&gt;src ➜ hello ➜ core.clj&lt;/code&gt; file.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;interacting&amp;#95;with&amp;#95;the&amp;#95;code&quot;&gt;&lt;/a&gt;Interacting with the code&lt;/h3&gt;&lt;p&gt;What makes &lt;code&gt;clojure&lt;/code&gt; particularly special is that it enables you to develop your code &lt;i&gt;interactively&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Place the cursor anywhere inside the &lt;code&gt;&amp;#40;defn foo ... &amp;#41;&lt;/code&gt; function and hit &lt;code&gt;ctrl + enter&lt;/code&gt;. You should see a progress indication in the status status and a highlighted &lt;code&gt;#'hello.core/foo&lt;/code&gt; message near the &lt;code&gt;foo&lt;/code&gt; function after a while (this process takes a bit more during the first time).&lt;/p&gt;&lt;p&gt;So, what did just happen?&lt;/p&gt;&lt;p&gt;A &lt;code&gt;clojure&lt;/code&gt; &lt;code&gt;REPL&lt;/code&gt; has been started under the scenes and we just compiled and loaded the &lt;code&gt;foo&lt;/code&gt; function on it. This might don't seem like a big deal but it actually is.&lt;/p&gt;&lt;p&gt;To get a feeling why, try the following: delete the &lt;code&gt;foo&lt;/code&gt; function, and create a new one:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn add &amp;#91;x y&amp;#93;
  &amp;#40;+ x y&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Evaluate it by hitting &lt;code&gt;ctrl + enter&lt;/code&gt; as before. Type below:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;add 5 3&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and evaluated the call. You should see a highlighted &lt;code&gt;8&lt;/code&gt; next to &lt;code&gt;&amp;#40;add 5 3&amp;#41;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Try changing the &lt;code&gt;add&lt;/code&gt; function by adding an extra parameter or make it do division instead, re-evaluate &lt;code&gt;add&lt;/code&gt; and then evaluate the call again.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;just&amp;#95;enough&amp;#95;customization&quot;&gt;&lt;/a&gt;Just enough customization&lt;/h3&gt;&lt;p&gt;Probably you want to change &lt;code&gt;LightTable&lt;/code&gt;'s default font and theme.&lt;/p&gt;&lt;p&gt;Hitting &lt;code&gt;ctrl+space&lt;/code&gt; will open a pane on the right. Type &lt;code&gt;settings&lt;/code&gt; and select &lt;code&gt;Settings: User behaviors&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Find the following line:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;:editor :lt.objs.style/set-theme &amp;quot;default&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove the &lt;code&gt;default&lt;/code&gt; text and hit &lt;code&gt;tab&lt;/code&gt;. You should see a drop-down list with all the themes &lt;code&gt;LightTable&lt;/code&gt; supports out of the box. Make your selection, save the file and you should see the changes right away.&lt;/p&gt;&lt;p&gt;Below there is the following line:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;;; &amp;#91;:app :lt.objs.style/font-settings &amp;quot;Courier New&amp;quot; &amp;quot;11&amp;quot;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remove &lt;code&gt;;;&lt;/code&gt;. Lines starting with a &lt;code&gt;;&lt;/code&gt; are considered comments and they are quite distinctive by being grayed-out. Set the font family and size of your preference and save.&lt;/p&gt;&lt;p&gt;&lt;code&gt;LightTable&lt;/code&gt; also supports fonts with programming ligatures like &lt;a href='https://github.com/tonsky/FiraCode'&gt;Fira Code&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can find configuration instructions &lt;a href='https://github.com/tonsky/FiraCode/wiki/LightTable-instructions'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;configure&amp;#95;&lt;code&gt;paredit&lt;/code&gt;&quot;&gt;&lt;/a&gt;Configure &lt;code&gt;paredit&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;If you are going to play around with &lt;code&gt;clojure&lt;/code&gt; for a while, you should consider getting familiar with the &lt;code&gt;paredit&lt;/code&gt; plugin as it can really make your life a lot easier.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;paredit&lt;/code&gt; plugin is installed by default but you have to configure some key bindings in order to use it. Hit &lt;code&gt;ctrl + space&lt;/code&gt;, type &lt;code&gt;user keymap&lt;/code&gt; and open the &lt;code&gt;Settings: User keymap&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Add the following lines just before the final closing bracket &lt;code&gt;&amp;#93;&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;:editor &amp;quot;ctrl-shift-k&amp;quot; :paredit.grow.right&amp;#93;
&amp;#91;:editor &amp;quot;ctrl-shift-j&amp;quot; :paredit.shrink.right&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To see it in action, go to the editor, and evaluate the following:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;range 10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now type &lt;code&gt;&amp;#40;reduce +&amp;#41;&lt;/code&gt; before the previous form:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;reduce +&amp;#41; &amp;#40;range 10&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Place the cursor inside the &lt;code&gt;&amp;#40;reduce +&amp;#41;&lt;/code&gt; form and hit &lt;code&gt;ctrl-shift-k&lt;/code&gt;, you should see the &lt;code&gt;&amp;#40;range 10&amp;#41;&lt;/code&gt; wrapped as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;reduce + &amp;#40;range 10&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you hit &lt;code&gt;ctrl-shift-j&lt;/code&gt; you will see the form being unwrapped.&lt;/p&gt;&lt;p&gt;Check &lt;a href='http://stackoverflow.com/questions/22168195/i-cant-find-a-light-table-cheat-sheet'&gt;this SO post&lt;/a&gt; if you want to configure more &lt;code&gt;paredit&lt;/code&gt; commands.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;where&amp;#95;to&amp;#95;go&amp;#95;from&amp;#95;here&quot;&gt;&lt;/a&gt;Where to go from here&lt;/h3&gt;&lt;p&gt;If you prefer to read a book about clojure you should check &lt;a href='http://www.braveclojure.com/clojure-for-the-brave-and-true/'&gt;Clojure for the Brave and True&lt;/a&gt; which is available online for free.&lt;/p&gt;&lt;p&gt;If you prefer solving problems then there are a number of options:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://www.4clojure.com/'&gt;4clojure&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://clojurekoans.com/'&gt;clojure koans&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://www.codewars.com/'&gt;codewars&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='http://exercism.io/'&gt;exercism.io&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Although it might be a bit tough for beginners, you should check &lt;code&gt;clojure&lt;/code&gt;'s &lt;a href='http://clojure.org/reference/documentation'&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Have fun!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Sat, 08 Oct 2016 00:00:00 +0000
</pubDate>
</item>
<item>
<guid>
http://kongeor.github.io/posts/2016-10-05-automating-the-deployment-of-a-cryogen-blog-to-github-pages/
</guid>
<link>
http://kongeor.github.io/posts/2016-10-05-automating-the-deployment-of-a-cryogen-blog-to-github-pages/
</link>
<title>
Automating the deployment of a cryogen blog to github pages
</title>
<description>
&lt;p&gt;I like static site generators, &lt;code&gt;clojure&lt;/code&gt; and &lt;a href='https://pages.github.com/'&gt;github pages&lt;/a&gt; and for those three reasons I happen to like &lt;a href='http://cryogenweb.org/'&gt;cryogen&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The only &quot;issue&quot; I encountered when I started playing around with &lt;a href='http://cryogenweb.org/'&gt;cryogen&lt;/a&gt; was &lt;a href='http://cryogenweb.org/docs/deploying-to-github-pages.html'&gt;deployment&lt;/a&gt;. I could make a script to push the generated content to &lt;code&gt;kongeor.github.io&lt;/code&gt; but that was no fun. This process had to be automated and why not using continuous integration platform like &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;?&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;removing&amp;#95;the&amp;#95;&lt;i&gt;blog-prefix&lt;/i&gt;&quot;&gt;&lt;/a&gt;Removing the &lt;i&gt;blog-prefix&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;The first thing to do is to remove the &lt;code&gt;/blog&lt;/code&gt; prefix. We want blog content to be in the root.  We need to edit the &lt;code&gt;resources/templates/config.edn&lt;/code&gt; and remove the &lt;code&gt;:blog-prefix&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;enabling&amp;#95;&lt;code&gt;circleci&lt;/code&gt;&quot;&gt;&lt;/a&gt;Enabling &lt;code&gt;circleci&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href='https://circleci.com/'&gt;Circleci&lt;/a&gt; is going to deploy our blog to &quot;production&quot;. &lt;/p&gt;&lt;p&gt;Create a &lt;code&gt;circle.yml&lt;/code&gt; in the root of the project which should looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;deployment:
  production:
    branch: master
    commands:
      - ./deploy.sh

test:
  override:
    - lein run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are overriding the default task which is to run tests to compile the blog which will be thrown in &lt;code&gt;resources/public&lt;/code&gt; (hacky! I know ...). Then the &lt;code&gt;deploy.sh&lt;/code&gt; script is going to  run which looks something like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git config --global user.email &amp;quot;${GIT&amp;#95;EMAIL}&amp;quot;
git config --global user.name &amp;quot;${GIT&amp;#95;NAME}&amp;quot;

rm -rf build
git clone git@github.com:kongeor/kongeor.github.io.git build
cp -rf resources/public/&amp;#42; build
cd build
git add &amp;#42;
git commit -a -m &amp;quot;build&amp;quot;
git push -u origin master
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are configuring &lt;code&gt;git&lt;/code&gt; because each build is a fresh new start. &lt;code&gt;GIT&amp;#95;EMAIL&lt;/code&gt; and &lt;code&gt;GIT&amp;#95;NAME&lt;/code&gt; are pulled from the environmental variables which can be configured in &lt;code&gt;circleci&lt;/code&gt;'s project settings. Go to &lt;a href='https://circleci.com/dashboard'&gt;dashboard&lt;/a&gt; and click the &lt;i&gt;gear&lt;/i&gt; near the project.&lt;/p&gt;&lt;p&gt;Then we remove the &lt;code&gt;build&lt;/code&gt; directory in case it exist - this is done mostly for convenience for local testing. Then &lt;code&gt;foo&lt;/code&gt;.github.io is cloned to &lt;code&gt;build&lt;/code&gt; directory. This repo will have only the built static site. The fresh compiled site is copied over it, and with the  convenvience of &lt;code&gt;git&lt;/code&gt; we add all the files which essentially will have only the diffences, and  push the changes.&lt;/p&gt;&lt;p&gt;In order for this thing to work, &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;  needs to have permissions to push to that repo.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;setup&amp;#95;ssh&amp;#95;keys&quot;&gt;&lt;/a&gt;Setup SSH keys&lt;/h3&gt;&lt;p&gt;You need to generate an &lt;a href='https://help.github.com/articles/generating-an-ssh-key/'&gt;ssh key&lt;/a&gt;. Most probably you already have one, but I don't think that it's a good idea to use that one, because you will need to add your private key to &lt;a href='https://circleci.com/'&gt;circleci&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Go to project settings under your &lt;code&gt;foo.github.io&lt;/code&gt; repo and add your public key.&lt;/p&gt;&lt;p&gt;You need to go once again to project settings in &lt;a href='https://circleci.com/dashboard'&gt;dashboard&lt;/a&gt;,  find the &lt;code&gt;SSH Permissions&lt;/code&gt; settings and add your private &lt;code&gt;SSH&lt;/code&gt; key there. You can find more information &lt;a href='https://circleci.com/docs/github-security-ssh-keys/'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;test&amp;#95;it!&quot;&gt;&lt;/a&gt;Test it!&lt;/h3&gt;&lt;p&gt;You should be good to test this setup. Create a post, commit and push. Boom! &lt;a href='https://circleci.com/'&gt;Circleci&lt;/a&gt; should fire up the build and when ready it should push the compiled blog to &quot;production&quot;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 05 Oct 2016 00:00:00 +0000
</pubDate>
</item>
</channel>
</rss>
